import numpy as np
import face_recognition as fr
import cv2
from typing import Optional, List
from regras_api.json_buscar_matrix import localizar_cadastros

melhor_matrix = None
melhor_nome = None
melhor_id = None

def identificador_face(data: [Optional] = None, rostos_conhecidos: [Optional] = None, nomes_dos_rostos: [Optional] = None, _id: [Optional] = None ):
    # Carrega os rostos conhecidos
    entrar_ = False
    global melhor_nome, melhor_id, melhor_matrix
    #if data is None or rostos_conhecidos is None or nomes_dos_rostos is None and nao_entrar_:
    if entrar_:
        try:
            rostos_conhecidos, nomes_dos_rostos, _id = localizar_cadastros()
            video_capture = cv2.VideoCapture(0)
            detectado = False
            raio_x = 150  # Raio do eixo X da elipse (horizontal)
            raio_y = 200  # Raio do eixo Y da elipse (vertical, mais longo)
            while detectado == False:
                ret, frame = video_capture.read()
                if frame is None:
                    return 'A frame está vazia'
                rgb_frame = np.ascontiguousarray(frame[:, :, ::-1])
                h, w, _ = frame.shape
                centro_x, centro_y = w // 2, h // 2
                # Desenha a elipse no centro da tela
                cv2.ellipse(frame, (centro_x, centro_y), (raio_x, raio_y), 0, 0, 360, (0, 255, 0), 2)
                localizacao_dos_rostos = fr.face_locations(rgb_frame)
                rosto_desconhecidos = fr.face_encodings(rgb_frame, localizacao_dos_rostos)
                # Lista para armazenar distâncias das faces
                distancias_faces = []
                for (top, right, bottom, left), rosto_desconhecido in zip(localizacao_dos_rostos, rosto_desconhecidos):
                    # Calcula o centro do rosto
                    rosto_centro_x = (left + right) // 2
                    rosto_centro_y = (top + bottom) // 2
                    # Calcula a distância entre o centro do rosto e o centro da elipse
                    distancia = np.sqrt((rosto_centro_x - centro_x) ** 2 + (rosto_centro_y - centro_y) ** 2)
                    distancias_faces.append((distancia, (top, right, bottom, left), rosto_desconhecido))
                # Se houver rostos detectados
                if distancias_faces:
                    # Ordena as faces pela distância (menor distância = mais próxima)
                    distancias_faces.sort(key=lambda x: x[0])
                    # A face mais próxima é a primeira
                    _, (top, right, bottom, left), rosto_desconhecido = distancias_faces[0]
                    # Verifica se a face está dentro da elipse (distância <= raio)
                    if (abs((left + right) // 2 - centro_x) / raio_x) ** 2 + (abs((top + bottom) // 2 - centro_y) / raio_y) ** 2 <= 1:
                        # Compara a face mais próxima com as conhecidas
                        print(rostos_conhecidos)
                        resultados = fr.compare_faces(rostos_conhecidos, rosto_desconhecido)
                        face_distances = fr.face_distance(rostos_conhecidos, rosto_desconhecido)
                        # Encontra o rosto mais similar
                        melhor_id = np.argmin(face_distances)
                        if resultados[melhor_id]:
                            melhor_matrix = rostos_conhecidos[melhor_id]
                            melhor_nome = nomes_dos_rostos[melhor_id]
                            detectado = True
                        else:
                            melhor_nome = "Não detectado"
                        # Desenha o retângulo ao redor da face mais próxima
                        #cv2.rectangle(frame, (left, top), (right, bottom), (0, 0, 255), 2)
                        # Desenha o texto com o nome
                        #cv2.rectangle(frame, (left, bottom - 35), (right, bottom), (0, 0, 255), cv2.FILLED)
                        #font = cv2.FONT_HERSHEY_SIMPLEX
                        #cv2.putText(frame, melhor_nome, (left + 6, bottom - 6), font, 1.0, (255, 255, 255), 1)
                # Exibe o quadro da webcam com a elipse
                #cv2.imshow('Webcam_facerecognition', frame)
                # Aguardar até que o usuário pressione a tecla 'q' para sair
                if cv2.waitKey(1) & 0xFF == ord('q'):
                    break
            video_capture.release()
            cv2.destroyAllWindows()
            return melhor_nome, melhor_id, melhor_matrix
        except Exception as e:
            print('matrix_digital_identif.py', e)
            return None, None, None


    if data and rostos_conhecidos and nomes_dos_rostos and _id:
        try:
            rosto_desconhecido = data
            rosto_desconhecido = np.array(rosto_desconhecido)
            resultados = fr.compare_faces(rostos_conhecidos, rosto_desconhecido)
            face_distances = fr.face_distance(rostos_conhecidos, rosto_desconhecido)
            # Encontra o rosto mais similar
            melhor_id = np.argmin(face_distances)
            if resultados[melhor_id]:
                melhor_matrix = rostos_conhecidos[melhor_id]
                melhor_nome = nomes_dos_rostos[melhor_id]
                melhor__id = _id[melhor_id]
                return melhor_nome, melhor__id, melhor_matrix
            else:
                return None, None, None
        except Exception as e:
            print('matrix_digital_identif.py', e)
            return None, None, None

    return None, None, None




#x,a,v = identificador_face([[-0.09565169364213943, 0.07743556797504425, 0.022269582375884056, -0.006307507865130901, 0.09418709576129913, -0.0350610613822937, -0.06189880147576332, -0.13464941084384918, 0.21316571533679962, -0.15162481367588043, 0.24553731083869934, 0.0016074790619313717, -0.1787569671869278, -0.18077914416790009, 0.03017250820994377, 0.1288059651851654, -0.14081814885139465, -0.1265009194612503, -0.09510488063097, -0.11167959123849869, 0.07586181163787842, 0.03865571320056915, 0.0558667853474617, 0.0685175359249115, -0.2634754180908203, -0.33848634362220764, -0.05581994727253914, -0.14141815900802612, -0.012468265369534492, -0.1023659035563469, -0.06550617516040802, 0.059159617871046066, -0.1516764909029007, 4.07341867685318e-05, -0.03853787109255791, 0.15251943469047546, 0.008843612857162952, 0.03930748999118805, 0.1962292194366455, 0.07027828693389893, -0.17843149602413177, 0.03781602531671524, -0.021993618458509445, 0.28627148270606995, 0.19561925530433655, -0.012446670792996883, 0.039870258420705795, -0.040399227291345596, 0.14684131741523743, -0.2655646502971649, 0.06026553735136986, 0.08821916580200195, 0.1200912669301033, 0.09326634556055069, 0.076052725315094, -0.18507824838161469, -0.0597054585814476, 0.0723869800567627, -0.15184538066387177, 0.08152797818183899, -0.007579449564218521, -0.11582545191049576, -0.05209141969680786, 0.029880719259381294, 0.2368379831314087, 0.15434923768043518, -0.16770149767398834, -0.04581337422132492, 0.16735373437404633, -0.11690902709960938, -0.02231423929333687, 0.08185479044914246, -0.09659333527088165, -0.17810417711734772, -0.3399960398674011, 0.050793737173080444, 0.4252997636795044, 0.09527575224637985, -0.23664139211177826, 0.013588450849056244, -0.13197459280490875, 0.023884687572717667, 0.06705855578184128, 0.06595056504011154, -0.08530131727457047, 0.08453567326068878, -0.09444229304790497, 0.05951954424381256, 0.19587726891040802, 0.04040681570768356, -0.08452778309583664, 0.22752052545547485, 0.009319152683019638, 0.15290673077106476, 0.061208415776491165, 0.051945075392723083, -0.09138758480548859, -0.07702844589948654, -0.1346263736486435, -0.010352972894906998, 0.017870832234621048, -0.07727956026792526, 0.001236048061400652, 0.05981740355491638, -0.16236966848373413, 0.2524529695510864, 0.0782589465379715, -0.004546351730823517, 0.011548326350748539, 0.15258775651454926, -0.10407323390245438, -0.015712525695562363, 0.12347273528575897, -0.2838491201400757, 0.18516676127910614, 0.17767593264579773, 0.09438065439462662, 0.20982860028743744, 0.07074131816625595, 0.055984094738960266, -0.05811983346939087, 0.003322344273328781, -0.14364449679851532, -0.05671187862753868, 0.024283763021230698, 0.009231400676071644, 0.09090053290128708, 0.06819791346788406], [-0.12150664627552032, 0.14160872995853424, 0.027228331193327904, -0.02037474326789379, -0.09491818398237228, -0.012556236237287521, -0.04885842278599739, -0.044529762119054794, 0.18918555974960327, -0.10670298337936401, 0.2469303458929062, -0.04676874354481697, -0.26518526673316956, 0.03473178297281265, -0.06365678459405899, 0.11130861937999725, -0.11265130341053009, -0.07386256009340286, -0.00930583942681551, -0.04450640827417374, 0.10285723209381104, -0.02044444903731346, -0.04049772024154663, 0.10379959642887115, -0.08421967178583145, -0.3129914402961731, -0.13104967772960663, -0.05995839089155197, -0.009722268208861351, -0.1247744932770729, -0.05550975725054741, 0.08238804340362549, -0.13709020614624023, -0.04710257053375244, -0.018178604543209076, 0.08577921241521835, 0.046067237854003906, -0.02058052457869053, 0.14846427738666534, -0.0035117696970701218, -0.11913984268903732, 0.07795923203229904, -0.006596146151423454, 0.3021811842918396, 0.10432025045156479, 0.0638117641210556, -0.013146493583917618, -0.05010927841067314, 0.1489962488412857, -0.2556241452693939, 0.17213818430900574, 0.12739960849285126, 0.16140025854110718, 0.02444346249103546, 0.06114615499973297, -0.17335975170135498, -0.0007950719445943832, 0.13513301312923431, -0.17842227220535278, 0.14358949661254883, 0.07638047635555267, -0.07132547348737717, -0.013105753809213638, -0.03718603402376175, 0.21628303825855255, 0.18808166682720184, -0.13036055862903595, -0.12288370728492737, 0.13259725272655487, -0.09722227603197098, -0.024314679205417633, 0.042524635791778564, -0.14571860432624817, -0.19425785541534424, -0.26340919733047485, 0.18564511835575104, 0.4329053461551666, 0.16172979772090912, -0.18977981805801392, 0.041368912905454636, -0.07805939763784409, -0.00264714565128088, 0.06818410754203796, 0.052364323288202286, -0.10777787864208221, -0.06971733272075653, -0.1596834510564804, 0.06654328852891922, 0.19113591313362122, 0.018770942464470863, -0.10383493453264236, 0.28196972608566284, -0.025928793475031853, 0.08786117285490036, 0.011597787030041218, 0.07254432886838913, -0.10049957036972046, -0.049898721277713776, -0.11450041830539703, -0.014286844991147518, 0.09080834686756134, -0.09729796648025513, -0.09691918641328812, 0.12222041189670563, -0.18816623091697693, 0.07437136024236679, -0.04619313031435013, 0.04056201130151749, -0.0029778722673654556, 0.07119224965572357, -0.18774710595607758, -0.015688667073845863, 0.13998134434223175, -0.2673319876194, 0.20142675936222076, 0.08640610426664352, 0.07033276557922363, 0.1276349574327469, 0.10891279578208923, 0.03798060491681099, 0.10349823534488678, -0.09598643332719803, -0.1444557160139084, -0.07540473341941833, 0.14234046638011932, 0.005651953164488077, 0.03637445345520973, 0.05956447869539261], [-0.09565169364213943, 0.07743556797504425, 0.022269582375884056, -0.006307507865130901, 0.09418709576129913, -0.0350610613822937, -0.06189880147576332, -0.13464941084384918, 0.21316571533679962, -0.15162481367588043, 0.24553731083869934, 0.0016074790619313717, -0.1787569671869278, -0.18077914416790009, 0.03017250820994377, 0.1288059651851654, -0.14081814885139465, -0.1265009194612503, -0.09510488063097, -0.11167959123849869, 0.07586181163787842, 0.03865571320056915, 0.0558667853474617, 0.0685175359249115, -0.2634754180908203, -0.33848634362220764, -0.05581994727253914, -0.14141815900802612, -0.012468265369534492, -0.1023659035563469, -0.06550617516040802, 0.059159617871046066, -0.1516764909029007, 4.07341867685318e-05, -0.03853787109255791, 0.15251943469047546, 0.008843612857162952, 0.03930748999118805, 0.1962292194366455, 0.07027828693389893, -0.17843149602413177, 0.03781602531671524, -0.021993618458509445, 0.28627148270606995, 0.19561925530433655, -0.012446670792996883, 0.039870258420705795, -0.040399227291345596, 0.14684131741523743, -0.2655646502971649, 0.06026553735136986, 0.08821916580200195, 0.1200912669301033, 0.09326634556055069, 0.076052725315094, -0.18507824838161469, -0.0597054585814476, 0.0723869800567627, -0.15184538066387177, 0.08152797818183899, -0.007579449564218521, -0.11582545191049576, -0.05209141969680786, 0.029880719259381294, 0.2368379831314087, 0.15434923768043518, -0.16770149767398834, -0.04581337422132492, 0.16735373437404633, -0.11690902709960938, -0.02231423929333687, 0.08185479044914246, -0.09659333527088165, -0.17810417711734772, -0.3399960398674011, 0.050793737173080444, 0.4252997636795044, 0.09527575224637985, -0.23664139211177826, 0.013588450849056244, -0.13197459280490875, 0.023884687572717667, 0.06705855578184128, 0.06595056504011154, -0.08530131727457047, 0.08453567326068878, -0.09444229304790497, 0.05951954424381256, 0.19587726891040802, 0.04040681570768356, -0.08452778309583664, 0.22752052545547485, 0.009319152683019638, 0.15290673077106476, 0.061208415776491165, 0.051945075392723083, -0.09138758480548859, -0.07702844589948654, -0.1346263736486435, -0.010352972894906998, 0.017870832234621048, -0.07727956026792526, 0.001236048061400652, 0.05981740355491638, -0.16236966848373413, 0.2524529695510864, 0.0782589465379715, -0.004546351730823517, 0.011548326350748539, 0.15258775651454926, -0.10407323390245438, -0.015712525695562363, 0.12347273528575897, -0.2838491201400757, 0.18516676127910614, 0.17767593264579773, 0.09438065439462662, 0.20982860028743744, 0.07074131816625595, 0.055984094738960266, -0.05811983346939087, 0.003322344273328781, -0.14364449679851532, -0.05671187862753868, 0.024283763021230698, 0.009231400676071644, 0.09090053290128708, 0.06819791346788406], [-0.0033697374165058136, 0.12447769194841385, 0.035798579454422, -0.00017403322272002697, 0.066983163356781, -0.04183283820748329, -0.07709367573261261, -0.12877844274044037, 0.19494830071926117, -0.1275809407234192, 0.2535833418369293, -0.01885654777288437, -0.19196052849292755, -0.15482187271118164, 0.07933519035577774, 0.09774912893772125, -0.1335073709487915, -0.13284806907176971, -0.12998521327972412, -0.06940475851297379, 0.0655694305896759, 0.013497918844223022, 0.09270462393760681, 0.053389307111501694, -0.23858074843883514, -0.38751521706581116, -0.08075294643640518, -0.12027803063392639, 0.05259665101766586, -0.09153127670288086, -0.06807657331228256, 0.07825593650341034, -0.17497041821479797, -0.04009309411048889, -0.018475424498319626, 0.11034923791885376, 0.00443902425467968, -0.0042947991751134396, 0.21207422018051147, 0.06837452203035355, -0.18719816207885742, 0.049858178943395615, -0.017435157671570778, 0.2471083253622055, 0.2044542133808136, 0.02964423969388008, 0.09569687396287918, -0.06414061784744263, 0.12142933160066605, -0.2536216080188751, 0.12027062475681305, 0.11960513889789581, 0.10779023915529251, 0.12948207557201385, 0.09685233235359192, -0.1925061047077179, -0.03394633159041405, 0.08311852067708969, -0.14603127539157867, 0.10191758722066879, 0.05111308395862579, -0.06214762479066849, -0.027534160763025284, -0.01967163197696209, 0.21577292680740356, 0.12449698895215988, -0.11381834745407104, -0.0733562633395195, 0.1419023722410202, -0.13067574799060822, -0.04453108832240105, 0.10040045529603958, -0.09266608208417892, -0.1659204214811325, -0.30236104130744934, 0.05010707676410675, 0.4289534091949463, 0.1630248874425888, -0.23173029720783234, 0.010510565713047981, -0.14046864211559296, -0.030606795102357864, 0.043803803622722626, 0.016663560643792152, -0.09207748621702194, 0.0694708302617073, -0.0921442061662674, 0.04969511926174164, 0.24666281044483185, 0.04750408977270126, -0.05799824744462967, 0.2624857425689697, 0.0013070087879896164, 0.1314815878868103, 0.06154138967394829, 0.014809844084084034, -0.1000329926609993, -0.05280797928571701, -0.1432904154062271, -0.03224022313952446, 0.0071260747499763966, -0.11391986906528473, -0.031170900911092758, 0.04119472578167915, -0.21150679886341095, 0.258267879486084, 0.04936300963163376, -0.002149514853954315, 0.02811698243021965, 0.15008202195167542, -0.12071475386619568, -0.016710510477423668, 0.1665509045124054, -0.2865266501903534, 0.1865280419588089, 0.19017818570137024, 0.1322675496339798, 0.18747366964817047, 0.08556333929300308, 0.10699155926704407, -0.03824250400066376, -0.026507962495088577, -0.1533781886100769, -0.08536438643932343, 0.03803316876292229, 0.017564576119184494, 0.07248362898826599, 0.0822698324918747]])
